{"version":3,"sources":["corona.jpg","Table.jsx","Tracker.jsx","Header.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Table","props","sn","country","date","totalcase","newcase","totaldeath","newdaeth","totalrecovered","newrecoverd","Tracker","useState","coviddata","setcoviddata","useEffect","a","axios","get","res","console","log","data","Countries","getInfo","className","map","val","ind","key","Date","Country","TotalConfirmed","TotalDeaths","NewDeaths","TotalRecovered","NewRecovered","Header","src","corona","width","height","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,oC,iMCkB5BC,EAjBD,SAACC,GACd,OACC,oCACC,4BACC,4BAAKA,EAAMC,IACX,4BAAKD,EAAME,SACX,4BAAKF,EAAMG,MACX,4BAAKH,EAAMI,WACX,4BAAKJ,EAAMK,SACX,4BAAKL,EAAMM,YACX,4BAAKN,EAAMO,UACX,4BAAKP,EAAMQ,gBACX,4BAAKR,EAAMS,gB,gBCsCAC,G,MA/CC,WAAO,IAAD,EACaC,mBAAS,IADtB,mBACdC,EADc,KACHC,EADG,KAUrB,OARAC,qBAAU,WAAM,4CACf,4BAAAC,EAAA,sEACmBC,IAAMC,IAAI,sCAD7B,OACOC,EADP,OAECC,QAAQC,IAAIF,EAAIG,KAAKC,WACrBT,EAAaK,EAAIG,KAAKC,WAHvB,4CADe,uBAAC,WAAD,wBAMfC,MAGA,oCACC,wCACA,2BAAOC,UAAU,SAChB,2BAAOA,UAAU,IAChB,4BACC,iCACA,uCACA,oCACA,0CACA,wCACA,2CACA,yCACA,8CACA,8CAGDZ,EAAUa,KAAI,SAACC,EAAKC,GACpB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACL1B,GAAI0B,EACJxB,KAAMuB,EAAIG,KACV3B,QAASwB,EAAII,QACb1B,UAAWsB,EAAIK,eACf1B,QAASqB,EAAIK,eACbzB,WAAYoB,EAAIM,YAChBzB,SAAUmB,EAAIO,UACdzB,eAAgBkB,EAAIQ,eACpBzB,YAAaiB,EAAIS,sB,iBC9BTC,EAVA,WACd,OACC,oCACC,yBAAKZ,UAAU,UACd,4CACA,yBAAKA,UAAU,YAAYa,IAAKC,IAAQC,MAAM,MAAMC,OAAO,W,MCOhDC,MATf,WACC,OACC,oCACC,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.2b2c3a6e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/corona.9090517e.jpg\";","import React from \"react\";\r\nconst Table = (props) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>{props.sn}</td>\r\n\t\t\t\t<td>{props.country}</td>\r\n\t\t\t\t<td>{props.date}</td>\r\n\t\t\t\t<td>{props.totalcase}</td>\r\n\t\t\t\t<td>{props.newcase}</td>\r\n\t\t\t\t<td>{props.totaldeath}</td>\r\n\t\t\t\t<td>{props.newdaeth}</td>\r\n\t\t\t\t<td>{props.totalrecovered}</td>\r\n\t\t\t\t<td>{props.newrecoverd}</td>\r\n\t\t\t</tr>\r\n\t\t</>\r\n\t);\r\n};\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Table from \"./Table\";\r\nimport axios from \"axios\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nconst Tracker = () => {\r\n\tconst [coviddata, setcoviddata] = useState([]);\r\n\tuseEffect(() => {\r\n\t\tasync function getInfo() {\r\n\t\t\tconst res = await axios.get(\"https://api.covid19api.com/summary\");\r\n\t\t\tconsole.log(res.data.Countries);\r\n\t\t\tsetcoviddata(res.data.Countries);\r\n\t\t}\r\n\t\tgetInfo();\r\n\t});\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div>listing</div>\r\n\t\t\t<table className=\"table\">\r\n\t\t\t\t<thead className=\"\">\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>#</th>\r\n\t\t\t\t\t\t<th>Country</th>\r\n\t\t\t\t\t\t<th>Date</th>\r\n\t\t\t\t\t\t<th>Total Case</th>\r\n\t\t\t\t\t\t<th>New Case</th>\r\n\t\t\t\t\t\t<th>Toatl Death</th>\r\n\t\t\t\t\t\t<th>New Death</th>\r\n\t\t\t\t\t\t<th>Toatl Recoverd</th>\r\n\t\t\t\t\t\t<th>New Recoverd</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t{coviddata.map((val, ind) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Table\r\n\t\t\t\t\t\t\tkey={ind}\r\n\t\t\t\t\t\t\tsn={ind}\r\n\t\t\t\t\t\t\tdate={val.Date}\r\n\t\t\t\t\t\t\tcountry={val.Country}\r\n\t\t\t\t\t\t\ttotalcase={val.TotalConfirmed}\r\n\t\t\t\t\t\t\tnewcase={val.TotalConfirmed}\r\n\t\t\t\t\t\t\ttotaldeath={val.TotalDeaths}\r\n\t\t\t\t\t\t\tnewdaeth={val.NewDeaths}\r\n\t\t\t\t\t\t\ttotalrecovered={val.TotalRecovered}\r\n\t\t\t\t\t\t\tnewrecoverd={val.NewRecovered}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</table>\r\n\t\t</>\r\n\t);\r\n};\r\nexport default Tracker;\r\n","import React from \"react\";\r\nimport corona from \"./corona.jpg\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"header\">\r\n\t\t\t\t<h1>GO Corona GO</h1>\r\n\t\t\t\t<img className=\"img-fluid\" src={corona} width=\"200\" height=\"200\" />\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\nexport default Header;\r\n","import React from \"react\";\nimport Tracker from \"./Tracker\";\nimport AlliApi from \"./AlliApi\";\nimport Header from \"./Header\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Header />\n\t\t\t<Tracker />\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}